?read.table
getwd9
getwd()
read.csv("Raw Learning Data.csv" , header=TRUE,)
RawData = read.csv("Raw Learning Data.csv" , header=TRUE)
View(RawData)
summary(RawData)
summary(RawData$Category)
length(RawData)
width(RawData)
size(RawData)
length(RawData$Category)
length(RawData$Category == "Actionable")
length(RawData$Category[== "Actionable"])
RawData$Category("Actionable")
RawData$Category= ("Actionable")
RawData = read.csv("Raw Learning Data.csv" , header=TRUE)
source('~/.active-rstudio-document')
View(RawData)
RawData$Category == actionable
RawData$Category == "actionable"
which(RawData$Category == "Actionable")
length(which(RawData$Category == "Actionable"))
length(which(RawData$Category == "Actionable")) / length(RawData$Category)
length(which(RawData$Category == "Actionable")) / length(RawData$Category)  * 100
length(which(RawData$Category == "Actionable")) / length(RawData$Category)  * 100
summary(RawData$Category)
summary(RawData$Category)[2]
summary(RawData$Category)[1]
summary(RawData$Category)[3]
summary(RawData$Category)[4]
summary(RawData$Category)[4] / length(Rawdata$Category)
summary(RawData$Category)[4] / length(RawData$Category)
6151/34233
SummaryStat = summary(RawData$Category)[1:length(RawData$Category)]
lenght(RawData$Category)
length(RawData$Category)
unique(RawData$Category)
levels(RawData$Category)
SummaryStat = summary(RawData$Category)[1:length(levels(RawData$Category)] / 34233
SummaryStats[1]
length(levels(RawData$Category))
1:length(levels(RawData$Category))
SummaryStat[1:8] = summary(RawData$Category)[1:length(levels(RawData$Category)] / 34233
SummaryStat[1:8] = summary(RawData$Category)[1:length(levels(RawData$Category)] / 4233
summary(RawData)
SummaryStats[1] = summary(RawData$Category)[1] / 34233
SummaryStats = summary(RawData$Category)[1] / 34233
SummaryStats
typeof(RawData)
cat(RawData$Identifier,RawData$Level)
RawData$new = cat(RawData$Identifier,RawData$Level)
View(RawData)
RawData[5] = as.factor(cat(RawData$Identifier,RawData$Level))
RawData$new = NULL
RawData$new = cat(RawData$Identifier,RawData$Level)
View(RawData)
class(RawData)
cat$(RawData$Identifier[1])
cat$(RawData$Identifier[1],RawData$Level[1])
cat(RawData$Identifier[1],RawData$Level[1])
RawData$Identifier[1]
RawData$Level[1]
RawData$Identifier = as.character(RawData$Identifier)
RawData$Identifier[1]
cat(RawData$Identifier[1],RawData$Level[1])
RawData$Level = as.factor(RawData$Level)
cat(RawData$Identifier[1],RawData$Level[1])
RawData$Level[1]
RawData$Level = as.character(RawData$Level)
cat(RawData$Identifier[1],RawData$Level[1])
cat(RawData$Identifier,RawData$Level)
RawData$New = cat(RawData$Identifier,RawData$Level)
View(RawData)
cat(RawData$Identifier[2],RawData$Level[2])
cat(RawData$Identifier[8],RawData$Level[8])
summary(RawData)
df = RawData
df$Text = as.character(df$Text)
summary(df)
summary(df)df$Category = as.factor(df$Category)
df$Category = as.factor(df$Category)
summary(df)
levels(df$Category)
df = df[1:4]
df
summary(df)
df$new
?print
df$new = c(df$Identifier, df$Level)
df$new = cat(df$Identifier, df$Level)
View(df)
mode
mode(df)
mode(df) ="data.frame"
mode(df)
mode(df) = data.frame
data.frame(df)
df = data.frame(df)
mdoe(df)
mode(df)
?mode
?readLines
getwd()
ddff  = readLines("Raw Learning Data.csv")
summary(ddff)
View(ddff)
ddff = as.data.frame(ddff)
View(ddff)
length(ddff)
character(ddff[1])
nchar(ddff[2])
ddff[2]
ddff[1,2]
ddff[1,1]
mode(ddff)
ddff$CharCount = nrow(ddff)
ddff$CharCount[1]
ddff$CharCount = nchar(ddff)
nchar(ddff[1])
nchar(ddff[2])
nchar()
nchar("hello")
ddff[2]
ddff[1,1]
nchar(ddff[1,1])
ddff[1,1]
typeof(ddff)
typeof(ddff[1,1])
typeof(ddff[2,1])
ddff[,1]=as.character(ddff[,1])
typeof(ddff[2,1])
nchar(ddff[1,1])
ddff$CharCount = nchar(ddff[,1])
summary(CharCount)
summary(ddff$CharCount)
?gsub
ddff[1,1]
t = ddff[1,1]
strsplit(t)
strsplit(t,",")
DF = strsplit(ddff,",")
DF = strsplit(ddff[,1],",")
DF=as.data.frame(DF)
DF = data.frame(DF)
?as.data.frame
DF = data.frame(DF,stringsAsFactors = FALSE)
DF = as.pairlist(DF,stringsAsFactors = FALSE)
DF = as.pairlist(DF)
DF[1]
typeof(DF)
DF = as.vector(DF)
typeof(DF)
DF[1]
DF[[1]]
DF[[2]]
DF[2]
Df = as.list.data.frame(DF)
remove(Df)
?strsplit
View(df)
df$CharCount = nchar(df$Text)
View(df)
Names(df)
remove(ddff)
remove(DF,t, SummaryStat, SummaryStats)
df = RawData
df$TextChar = nchar(df$Text)
typeof(df$Text)
df$Text = as.character(df$Text)
df$Text = as.character(df$Text)
df$Identifier = as.character(df$Identifier)
df$Level = as.character(df$Level)
df$Category = as.character(df$Category)
#Character count of Text
df$TextChar = nchar(df$Text)
View(df)
df = df[-c(5)]
View(df)
View(RawData)
View(df)
?require
require(stringr)
?rm_white
require(qdap)
install.packages("qdap")
require(qdap)
?wc
wd(df[2,3])
wc(df[2,3])
df = df[-c(5)]
df$wordcount = wc(df$Text)
View(df)
duplicated(df$Identifier)
which(duplicated(df$Identifier))
length(which(duplicated(df$Identifier)))
df = df[-c(which(duplicated(df$Identifier))), ]
length(which(duplicated(df$Identifier)))
1867+32366
length(which(duplicated(df$Text)))
TextDuplicates = which(duplicated(df$Text)))
TextDuplicates = which(duplicated(df$Text))
TextDuplicates
TextDuplicates[19]
TextDuplicates[1]
df$Text[19]
df$Text[76]
df$Text[134]
df$Text[135]
df$Text[286]
TextDup = df$Text[TextDuplicates]
TextDup = as.data.drame(TextDup)
TextDup = as.data.frame(TextDup)
View(TextDup)
remove(RawData)
summary(df$Category)
df$Category = as.factor(df$Category)
summary(df$Category)
?which
TextDup = df$Text[which(duplicated(df$Identifier))]
dfActionable = subet(df, Category == "Actionable")
dfActionable = subset(df, Category == "Actionable")
View(dfActionable)
for (CAT in summary(df$Category))
{
a[CAT] = subset(df, CAT == summarydf$Category)
}
for (CAT in summary(df$Category))
{
a[CAT] = subset(df, CAT == summary(df$Category)
}
CAT
for (CAT in summary(df$Category))
{
a[CAT] = subset(df, CAT == summary(df$Category) )
}
a = NULL
for (CAT in summary(df$Category))
{
a[CAT] = subset(df, CAT == summary(df$Category) )
}
summary(df$Category)
dfUnCat = subset(df, Category == "")
View(dfUnCat)
?sample
require(dplyr)
?sample
Test = sample_frac(df, 0.7)
View(Test)
?sample_frac
Test = sample_frac(df, 0.7, replace = FALSE)
dftrain = df[-c(Test)]
dftrain = df[-Test,]
View(Test)
rownames(Test)
dftrain = df[-rownames(Test),]
dftrain = df[-c(rownames(Test)),]
rownames(Test)
df[-rownames(Test)]
df[-rownames(Test),]
df[-rownames(Test), ]
?set.seed
require(caTools)
install.packages("caTools")
require(caTools)
df$split = sample.split(df, SplitRatio = 0.7)
View(Test)
as.numeric(rownames(Test))
dftrain = df[-c(as.numeric(rownames(Test)), ]
dftrain = df[-as.numeric(rownames(Test), ]
dftrain = df[-as.numeric(rownames(Test), ]
dfTrain = df
dfTrain = df[-as.numeric(rownames(Test)), ]
set.seed(123)
Test = sample_frac(df, 0.7, replace = FALSE)
dfTrain = df[-as.numeric(rownames(Test)), ]
set.seed(123)
Test = sample_frac(df, 0.7, replace = FALSE)
dfTrain = df[-as.numeric(rownames(Test)), ]
set.seed(123)
dfTr = sample_frac(df, 0.7, replace = FALSE)
Test = df[-as.numeric(rownames(Test)), ]
#subsetting separating categories
dfActionable = subset(dfTr, Category == "Actionable")
dfDef = subset(dfTr, Category == "NA - Definition")
dfOther = subset(dfTr, Category == "NA - Other")
dfTrig = subset(dfTr, Category == "Trigger")
dfUnCat = subset(dfTr, Category == "")
remove(a, CAT, TextDup, TextDuplicates)
nrow(Test)
nrow(dfTr)
nrow(dfTr) + nrow(Test)
set.seed(123)
dfTr = sample_frac(df, 0.7, replace = FALSE)
Test = df[-as.numeric(rownames(dfTr)), ]
#subsetting separating categories
dfActionable = subset(dfTr, Category == "Actionable")
dfDef = subset(dfTr, Category == "NA - Definition")
dfOther = subset(dfTr, Category == "NA - Other")
dfTrig = subset(dfTr, Category == "Trigger")
dfUnCat = subset(dfTr, Category == "")
nrow(dfTr) + nrow(Test)
View(dfTr)
View(Test)
dim(Test)
dim(dfTr)
dim(dfTr)[1] + dim(Test)[1]
as.numeric(rownames(dfTr))
set.seed(123)
dfTr = sample_frac(df, 0.7, replace = FALSE)
Test = df[-c(as.numeric(rownames(dfTr))), ]
dim(dfTr)[1] + dim(Test)[1]
dfTr$Identifier[== Test$Identifier]
dfTr$Identifier == Test$Identifier
whichi(dfTr$Identifier == Test$Identifier)
which(dfTr$Identifier == Test$Identifier)
dfTr[2159]
dfTr[2159,]
Test[2159,]
rownames(Test)[2159]
as.numeric(rownames(Test)[2159])
?sort
set.seed(123)
dt = sort(sample(nrow(df), nrow(df)*.7))
dfTr = df[dt,
Test = df[-dt, ]
set.seed(123)
dt = sort(sample(nrow(df), nrow(df)*.7))
dfTr = df[dt,]
Test = df[-dt,]
dim(dfTr)[1] + dim(Test)[1]
?sample
#subsetting separating categories
dfActionable = subset(dfTr, Category == "Actionable")
dfDef = subset(dfTr, Category == "NA - Definition")
dfOther = subset(dfTr, Category == "NA - Other")
dfTrig = subset(dfTr, Category == "Trigger")
dfUnCat = subset(dfTr, Category == "")
summary(dfTr)
View(dfTr)
